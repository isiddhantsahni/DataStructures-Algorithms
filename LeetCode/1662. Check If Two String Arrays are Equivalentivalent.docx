# Problem link ->https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent/description/

"""
Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.

A string is represented by an array if the array elements concatenated in order forms the string.

Example 1:

Input: word1 = ["ab", "c"], word2 = ["a", "bc"]
Output: true
Explanation:
word1 represents string "ab" + "c" -> "abc"
word2 represents string "a" + "bc" -> "abc"
The strings are the same, so return true.
Example 2:

Input: word1 = ["a", "cb"], word2 = ["ab", "c"]
Output: false
Example 3:

Input: word1  = ["abc", "d", "defg"], word2 = ["abcddefg"]
Output: true
 

Constraints:

1 <= word1.length, word2.length <= 103
1 <= word1[i].length, word2[i].length <= 103
1 <= sum(word1[i].length), sum(word2[i].length) <= 103
word1[i] and word2[i] consist of lowercase letters.
"""

#########################################################################################

# First submission: Tried to concatenate the array into defined string variables and compare the variables to either return true or false. 
# Runtime -> 61 ms Beats 46.31%
# Memory -> 14 MB Beats 33.11%

class Solution:
    def arrayStringsAreEqual(self, word1: List[str], word2: List[str]) -> bool:
        string1=""
        string2=""
        for i in word1:
            string1+=i
        for j in word2:
            string2+=j
        if string1 == string2:
            return True
        else:
            return False
            
 
# Second submission: Used the string function "join" to concatenate the lists, which decreased runtime and memory.
# Runtime -> 57 ms Beats 58.20%
# Memory -> 13.9 MB Beats 75.82%
 
class Solution:
    def arrayStringsAreEqual(self, word1: List[str], word2: List[str]) -> bool:
        string1="".join(word1)
        string2="".join(word2)
        if string1 == string2:
            return True
        else:
            return False

# Final submission: Directly concatenated the lists in "if" block without assigning it to a ariable, which significantly decreased the runtime and memory used.
# Runtime -> 34 ms Beats 93.94%
# Memory -> 13.8 MB Beats 75.82%

class Solution:
    def arrayStringsAreEqual(self, word1: List[str], word2: List[str]) -> bool:
        if "".join(word1) == "".join(word2):
            return True
        else:
            return False
 
