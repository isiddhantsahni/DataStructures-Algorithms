# Problem link -> https://leetcode.com/problems/remove-trailing-zeros-from-a-string/

"""
Given a positive integer num represented as a string, return the integer num without trailing zeros as a string.

 

Example 1:

Input: num = "51230100"
Output: "512301"
Explanation: Integer "51230100" has 2 trailing zeros, we remove them and return integer "512301".
Example 2:

Input: num = "123"
Output: "123"
Explanation: Integer "123" has no trailing zeros, we return integer "123".
 

Constraints:

1 <= num.length <= 1000
num consists of only digits.
num doesn't have any leading zeros.
"""

#########################################################################################
# First submission: Traversing from last to first character, if 0 found return string from 0 to i+1. 743/756 test cases passed.
# Runtime -> 
# Memory -> 

class Solution:
    def removeTrailingZeros(self, num: str) -> str:
        for i in range(len(num)-1,0,-1):
            if num[i] != '0':
                # print(num[i])
                return num[0:i+1]
        
# Second submission: One-liner using strip function.
# Runtime -> 43 ms Beats 73.31%
# Memory -> 16.55 MB Beats 60.92%

class Solution:
    def removeTrailingZeros(self, num: str) -> str:
        return num.rstrip('0')

# Third submission: Making first submission correct.
# Runtime -> 
# Memory -> 

class Solution:
    def removeTrailingZeros(self, num: str) -> str:
        for i in range(len(num),0,-1):
            if num[i-1] != '0':
                # print(num[i])
                return num[0:i]
        
