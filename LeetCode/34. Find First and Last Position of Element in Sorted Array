# Problem link -> https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/

"""
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109
"""

#########################################################################################
# First submission: 
# Runtime -> 
# Memory -> 

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        pos = [-1,-1]
        for n in range(len(nums)):
            if target == nums[n]:
                pos[0]=n
                length = 0
                while n+length < len(nums) and nums[n+length] == target:
                    length+=1
                pos[1] = n+length-1
                break  
        return pos
