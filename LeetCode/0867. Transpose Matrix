# Problem link -> https://leetcode.com/problems/transpose-matrix/description/

"""
Given a 2D integer array matrix, return the transpose of matrix.

The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.



 

Example 1:

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[1,4,7],[2,5,8],[3,6,9]]
Example 2:

Input: matrix = [[1,2,3],[4,5,6]]
Output: [[1,4],[2,5],[3,6]]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 1000
1 <= m * n <= 10^5
-109 <= matrix[i][j] <= 10^9
"""

#########################################################################################
# First submission: Creating a new array which is the transpose of the previous one.
# Runtime -> 152 ms Beats 5.20%
# Memory -> 18.08 MB Beats 6.87%

class Solution:
    def transpose(self, matrix: List[List[int]]) -> List[List[int]]:
        n=len(matrix)
        m=len(matrix[0])
        t=[[0]*n for _ in range(m)]
        for i in range(n):
            for j in range(m):
                t[j][i]=matrix[i][j]
        return t

# Second submission: Creating a new array which is the transpose of the previous one.
# Runtime -> 152 ms Beats 5.20%
# Memory ->

class Solution:
    def transpose(self, matrix: List[List[int]]) -> List[List[int]]:
        return zip(*matrix)
