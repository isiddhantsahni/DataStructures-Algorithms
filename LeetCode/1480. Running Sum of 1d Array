# Problem link -> https://leetcode.com/problems/running-sum-of-1d-array/

"""
Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]â€¦nums[i]).

Return the running sum of nums.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].
Example 2:

Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].
Example 3:

Input: nums = [3,1,2,10,1]
Output: [3,4,6,16,17]
 

Constraints:

1 <= nums.length <= 1000
-10^6 <= nums[i] <= 10^6
"""

#########################################################################################
# First submission: Appending sum of elements required to running_sum array
# Runtime -> 55 ms Beats 46.06%
# Memory -> 16.52 MB Beats 54.79%

class Solution:
    def runningSum(self, nums: List[int]) -> List[int]:
        running_sum = [0]*len(nums)
        for i,val in enumerate(nums):
            running_sum[i] = sum(nums[:i+1])

        return running_sum

# Second submission: Adding sum to the existing array elements sequentially.
# Runtime -> 50 ms Beats 66.72%
# Memory -> 16.44 MB Beats 83.49%
