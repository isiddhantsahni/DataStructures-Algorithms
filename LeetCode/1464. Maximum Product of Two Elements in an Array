# Problem link -> https://leetcode.com/problems/maximum-product-of-two-elements-in-an-array/description/

"""
Given the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).
 

Example 1:

Input: nums = [3,4,5,2]
Output: 12 
Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. 
Example 2:

Input: nums = [1,5,4,5]
Output: 16
Explanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.
Example 3:

Input: nums = [3,7]
Output: 12
 

Constraints:

2 <= nums.length <= 500
1 <= nums[i] <= 10^3
"""

#########################################################################################
# First submission: Using two loops to find the max value
# Runtime -> 347 ms Beats 9.00%
# Memory -> 16.25 MB Beats 64.79%

class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        max = 0
        for i in range(0,len(nums)):
            for j in range(i+1,len(nums)):
                temp = (nums[i]-1)*(nums[j]-1)
                if max < temp:
                    max = temp

        return max
        
# Second submission: Sorting and using the last two elements(As by theory they'll return the max product, as no negative values are present)
# Runtime -> 48 ms Beats 93.92%
# Memory -> 16.40 MB Beats 7.36%
