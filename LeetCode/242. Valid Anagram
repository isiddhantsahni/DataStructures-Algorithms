# Problem link -> https://leetcode.com/problems/valid-anagram/

"""
Given two strings s and t, return true if t is an anagram of s, and false otherwise.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false
 

Constraints:

1 <= s.length, t.length <= 5 * 104
s and t consist of lowercase English letters.
 

Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?

"""

#########################################################################################
# First submission: 
# Runtime -> 52 ms Beats 83.38%
# Memory -> 14.4 MB Beats 97.28%

# Used a dictionary to check if characters exists in dict; if it does add 1 to value, else add the number to dict with default value 1. Afterwards subtract in the second loop for second string.
Check if all chars in dictionary are 0, then return true. Else False

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        diction1={}
        if len(s)!=len(t):
            return False
        else:
            for i in s:
                if i in diction1.keys():
                    diction1[i]+=1
                else:
                    diction1[i]=1

            for j in t:
                if j in diction1.keys():
                    diction1[j]-=1

            for val in diction1.values():
                if val > 0:
                    return False
            return True

#########################################################################################
# Second submission: 
# Runtime -> 60 ms Beats 68.34%
# Memory -> 15.2 MB Beats 11.49%

# Sort the strings and compare

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if sorted(s) == sorted(t):
            return True
