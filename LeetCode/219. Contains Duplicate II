# Problem link -> https://leetcode.com/problems/contains-duplicate-ii/

"""

Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

 

Example 1:

Input: nums = [1,2,3,1], k = 3
Output: true
Example 2:

Input: nums = [1,0,1,1], k = 1
Output: true
Example 3:

Input: nums = [1,2,3,1,2,3], k = 2
Output: false
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109
0 <= k <= 105

"""

#########################################################################################
# First submission: 
# Runtime ->
# Memory -> 
# Failed 1 test case

# Used a dictionary to check if numbers exists in dict; if it does check abs(i-j)<=k and return true , else add the number to dict with it's position.

class Solution:
    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        hmap = {}
        for i in range(0,len(nums)):
            if nums[i] in hmap.keys():
                if abs(hmap[nums[i]]-i) <= k:
                    return True
            else:
                hmap[nums[i]]=i
                print(hmap)
        
        return False
       
# Second submission: 
# Runtime -> 590 ms Beats 93.20%
# Memory -> 29.8MB Beats 12.97%

# Looked at submissions and found the solution of why I got the failed test case.

class Solution:
    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        # Create hset for storing previous of k elements...
        hset = {}
        # Traverse for all elements of the given array in a for loop...
        for idx in range(len(nums)):
            # If duplicate element is present at distance less than equal to k, return true...
            if nums[idx] in hset and abs(idx - hset[nums[idx]]) <= k:
                return True
            hset[nums[idx]] = idx
        # If no duplicate element is found then return false...
        return False
        
# Third submission: 
# Runtime -> 
# Memory -> 

# Optimized my first solution


