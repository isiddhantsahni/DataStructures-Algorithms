# Problem link -> https://leetcode.com/problems/contains-duplicate/

"""

Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

"""

#########################################################################################
# First submission: 
# Runtime ->
# Memory -> 

# Passed only 8/21 test cases

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        diction = {}

        if len(nums) == 0 or len(nums) == 1:
            return nums

        for i in nums:
            if i in diction:
                diction[i]+=1
            else:
                diction[i]=1

        sort_all = sorted(diction.items(), key=lambda x: x[1], reverse=False)

        flag = 0
        list1 = []

        for key in diction.keys():
            if flag == k:
                return list1
            else:
                list1.append(key)
                flag+=1
        return list1

       
# Second submission: 
# Runtime -> 
# Memory -> 63%

# Optimizing the first solution, while checking if value already exists in dict, then return true. Else return false in the end after loop ends.

class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:

        diction={}
        for i in nums:
            if i in diction:
                return True
            else:
                diction[i]=1
        return False

# Third submission: 
# Runtime -> 518 ms Beats 63.29%
# Memory -> 26.2 MB Beats 28.25%

# Another solution would be to sort the array first, and then starting the array from 1 to len(array) so as to not get index out of range error. We check whether the number is equivalent to the previous element in array, thereby returning True. If nothing found, returning False.

class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        nums.sort()
        for i in range(1,len(nums)):
            if nums[i-1] == nums[i]:
                return True
        return False
