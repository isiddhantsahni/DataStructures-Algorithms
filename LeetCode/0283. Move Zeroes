# Problem link -> https://leetcode.com/problems/move-zeroes/description/

"""
Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1
 

Follow up: Could you minimize the total number of operations done?
"""

#########################################################################################
# First submission: Have left, right pointers to move 0 values to the right. (Quick sort)
# Runtime -> 172 ms Beats 81.36%
# Memory -> 18 MB Beats 52.89%

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        l=0
        for r in range(len(nums)):
            if nums[r]:
                temp=nums[l]
                nums[l]=nums[r]
                nums[r]=temp
                l+=1

# Second submission: Short hand for replacing values.
# Runtime -> 175 ms Beats 71.52%
# Memory -> 18 MB Beats 52.89%

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        l=0
        for r in range(len(nums)):
            if nums[r]:
                nums[l],nums[r]=nums[r],nums[l]
                l+=1
