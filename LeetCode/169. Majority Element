# Problem link -> https://leetcode.com/problems/majority-element/description/


"""
Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?
"""

#########################################################################################
# First submission: Adding values in dictionary with their counts, then returning the one with max value
# Runtime -> 197 ms Beats 7.22%
# Memory -> 17.8 MB Beats 73.89%

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        diction = {}
        for i in nums:
            if i in diction:
                diction[i]+=1
            else:
                diction[i]=1

        return max(zip(diction.values(), diction.keys()))[1]

# Second submission: Sort and Sending n//2 value of array.
# Runtime -> 159 ms Beats 97.84%
# Memory -> 17.8 MB Beats 73.89%

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        nums.sort()
        n = len(nums)
        return nums[n//2]
