# Problem link -> https://leetcode.com/problems/find-greatest-common-divisor-of-array/description/

"""
Given an integer array nums, return the greatest common divisor of the smallest number and largest number in nums.

The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.

 

Example 1:

Input: nums = [2,5,6,9,10]
Output: 2
Explanation:
The smallest number in nums is 2.
The largest number in nums is 10.
The greatest common divisor of 2 and 10 is 2.
Example 2:

Input: nums = [7,5,6,8,3]
Output: 1
Explanation:
The smallest number in nums is 3.
The largest number in nums is 8.
The greatest common divisor of 3 and 8 is 1.
Example 3:

Input: nums = [3,3]
Output: 3
Explanation:
The smallest number in nums is 3.
The largest number in nums is 3.
The greatest common divisor of 3 and 3 is 3.
 

Constraints:

2 <= nums.length <= 1000
1 <= nums[i] <= 1000
"""

#########################################################################################
# First submission: Using sort and math.gcf
# Runtime -> 64 ms Beats 31.25%
# Memory -> 16.49 MB Beats 29.93%

class Solution:
    def findGCD(self, nums: List[int]) -> int:
        nums.sort()
        return math.gcd(nums[0],nums[-1])
        
# Second submission: Not using inbuilt functions
# Runtime -> 60
ms
Beats
56.59%
# Memory -> 16.43
MB
Beats
29.93%
