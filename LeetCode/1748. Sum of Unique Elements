# Problem link -> https://leetcode.com/problems/sum-of-unique-elements/description/

"""
You are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.

Return the sum of all the unique elements of nums.

 

Example 1:

Input: nums = [1,2,3,2]
Output: 4
Explanation: The unique elements are [1,3], and the sum is 4.
Example 2:

Input: nums = [1,1,1,1,1]
Output: 0
Explanation: There are no unique elements, and the sum is 0.
Example 3:

Input: nums = [1,2,3,4,5]
Output: 15
Explanation: The unique elements are [1,2,3,4,5], and the sum is 15.
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100
"""

#########################################################################################
# First submission: Using dictionary
# Runtime -> 37 ms Beats 82.85%
# Memory -> 16.23 MB Beats 34.48%

class Solution:
    def sumOfUnique(self, nums: List[int]) -> int:
        count=0
        temp = {}
        for i in nums:
            if i in temp:
                temp[i]+=1
            else:
                temp[i]=1
        for key,val in temp.items():
            if val == 1:
                count+=key
        return count

# Second submission: Using count function of list
# Runtime -> 48 ms Beats 15.07%
# Memory -> 16.16 MB Beats 67.51%

class Solution:
    def sumOfUnique(self, nums: List[int]) -> int:
        sum=0
        for i in nums:
            if nums.count(i)==1:
                sum+=i
        return sum
