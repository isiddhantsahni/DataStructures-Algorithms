 Problem link -> https://leetcode.com/problems/group-anagrams/description/

"""
Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Example 2:

Input: strs = [""]
Output: [[""]]
Example 3:

Input: strs = ["a"]
Output: [["a"]]
 

Constraints:

1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.
"""


#########################################################################################
# First submission: 
# Runtime -> 103 ms Beats 60.5%
# Memory -> 19.4 MB Beats 37.92%

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:

        strs_table = {}

        for string in strs:
            sorted_string = ''.join(sorted(string))

            if sorted_string not in strs_table:
                strs_table[sorted_string] = []

            strs_table[sorted_string].append(string)

        return list(strs_table.values())

#########################################################################################
# Second submission: 
# Runtime -> 122 ms Beats 19.23%
# Memory -> 22.2 MB Beats 5.7%

# Found another solution 

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        ans = collections.defaultdict(list)

        for s in strs:
            count = [0] * 26
            for c in s:
                count[ord(c) - ord("a")] += 1
            # print(count)
            ans[tuple(count)].append(s)
            # print(tuple(count))
            # print(ans)
        return ans.values()
